using FluentAssertions;
using NUnit.Framework;
using System.Collections.Generic;

namespace AccountManagementSystem.Data.Tests
{
	[TestFixture]
	public class TestEntityPropertyProcessor
	{
		[Test]
		public void RemoveRecordInList_GivenNullList_ShouldReturnErrorMessage()
		{
			//Arrange
			//Act
			var actual = EntityPropertyProcessor.RemoveRecordInList(null, "girlfriend");

			//Assert
			actual.Error.Message.Should().Be("Invalid list entered!");
		}

		[Test]
		public void RemoveRecordInList_GivenEmptyList_ShouldReturnErrorMessage()
		{
			//Arrange
			//Act
			var actual = EntityPropertyProcessor.RemoveRecordInList(new List<string>(), "girlfriend");

			//Assert
			actual.Error.Message.Should().Be("List entered is empty!");
		}

		[TestCase("")]
		[TestCase(" ")]
		[TestCase(null)]
		public void RemoveRecordInList_GivenInvalidRecordToRemove_ShouldReturnErrorMessage(string recordToRemove)
		{
			//Arrange
			var list = new List<string> { "car", "house", "girlfriend" };

			//Act
			var actual = EntityPropertyProcessor.RemoveRecordInList(list, recordToRemove);

			//Assert
			actual.Error.Message.Should().Be("Invalid name entered for record to be removed!");
		}

		[Test]
		public void RemoveRecordInList_GivenListAndRecordToRemove_ShouldRemoveRecord()
		{
			//Arrange
			var list = new List<string> { "car", "house", "girlfriend" };

			//Act
			var actual = EntityPropertyProcessor.RemoveRecordInList(list, "girlfriend");

			//Assert
			Assert.AreEqual(2, actual.List.Count);
		}

		[Test]
		public void RemoveRecordInList_GivenListAndRecordToRemove_ShouldRemoveRecords()
		{
			//Arrange
			var list = new List<string> { "car", "house", "girlfriend" };

			//Act
			var actual = EntityPropertyProcessor.RemoveRecordInList(list, "soccer");

			//Assert
			actual.Error.Message.Should().Be("record to be removed is not found in a list!");
		}

		[Test]
		public void GetEntityProperties_WhenCalledWithNullProperties_ShouldReturnListOfEntityProperties()
		{
			//Arrange
			//Act
			var actual = EntityPropertyProcessor.GetEntityProperties(null);

			//Assert
			actual.Should().BeEquivalentTo(new List<string>());
		}

		[Test]
		public void GetEntityProperties_WhenCalledWithValidInput_ShouldReturnListOfEntityProperties()
		{
			//Arrange
			var expectedList = new List<string> { "Id", "Name", "Age" };

			//Act
			var actual = EntityPropertyProcessor.GetEntityProperties(typeof(TestingObject).GetProperties());

			//Assert
			actual.Should().BeEquivalentTo(expectedList);
		}

		[Test]
		public void GetAggregatedTableAndModelFields_WhenCalled_ShouldReturnAggregatedTableAndModelFields()
		{
			//Arrange
			var expectedList = new EntityPropertyProcessorResponse 
			{ 
				TableFields = "Id,Name,Age", 
				ModelFields = "@Id, @Name, @Age"
			};

			//Act
			var actual = EntityPropertyProcessor.GetAggregatedTableAndModelFields<TestingObject>();

			//Assert
			actual.Should().BeEquivalentTo(expectedList);
		}

		[Test]
		public void GetAggregatedTableAndModelFields_WhenCalledWithAutoGeneratedKeyName_ShouldReturnAggregatedFieldsWithoutTheKey()
		{
			//Arrange
			var autoGeneratedKeyName = "Id";
			var expectedList = new EntityPropertyProcessorResponse
			{
				TableFields = "Name,Age",
				ModelFields = "@Name, @Age"
			};

			//Act
			var actual = EntityPropertyProcessor.GetAggregatedTableAndModelFields<TestingObject>(autoGeneratedKeyName);

			//Assert
			actual.Should().BeEquivalentTo(expectedList);
		}
	}

	public class TestingObject
	{
		public int Id { get; set; }
		public string Name { get; set; }
		public string Age { get; set; }
	}
}