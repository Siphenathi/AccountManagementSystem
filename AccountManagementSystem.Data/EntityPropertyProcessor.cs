using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;

namespace AccountManagementSystem.Data
{
	public static class EntityPropertyProcessor
	{
		public static EntityPropertyProcessorResponse GetAggregatedTableAndModelFields<TEntity>(string autoGeneratedKeyName = null)
		{
			var listProcessorResponse = RemoveRecordInList(GetEntityProperties(typeof(TEntity).GetProperties()), autoGeneratedKeyName);
			var tableFields = string.Join(",", listProcessorResponse.List);
			var modelFields = $"@{ string.Join(", @", listProcessorResponse.List) }";

			return new EntityPropertyProcessorResponse { TableFields = tableFields, ModelFields = modelFields};
		}

		public static ListProcessorResponse RemoveRecordInList(List<string> list, string recordToRemove)
		{
			if (list == null) return new ListProcessorResponse { Error = new Error { Message = "Invalid list entered!" } };
			if (list.Count == 0) return new ListProcessorResponse { Error = new Error { Message = "List entered is empty!" } };
			if (string.IsNullOrWhiteSpace(recordToRemove)) return new ListProcessorResponse { Error = new Error { Message = "Invalid name entered for record to be removed!" } };

			var indexRecord = list.FindIndex(word => word.Equals(recordToRemove, System.StringComparison.CurrentCultureIgnoreCase));
			if (indexRecord == -1) return new ListProcessorResponse { Error = new Error { Message = "record to be removed is not found in a list!" } };//throw new KeyNotFoundException($"no column associated with entered auto-generated key name!");
			list.RemoveAt(indexRecord);
			return new ListProcessorResponse { List = list };
		}

		public static List<string> GetEntityProperties(IEnumerable<PropertyInfo> listOfProperties)
		{
			if (listOfProperties == null) return new List<string>();

			var entityProperties = (from prop in listOfProperties
									let attributes = prop.GetCustomAttributes(typeof(DescriptionAttribute), false)
									where attributes.Length <= 0 || (attributes[0] as DescriptionAttribute)?.Description != "ignore"
									select prop.Name).ToList();
			return entityProperties;
		}
	}
}
