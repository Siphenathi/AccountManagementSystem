using NUnit.Framework;
using System.Threading.Tasks;
using System.Linq;
using FluentAssertions;
using System.Collections.Generic;
using AccountManagementSystem.Model;
using System;

namespace AccountManagementSystem.Service.Tests
{
	[TestFixture]
	public class TestPersonService
	{
		[Test]
		public async Task GetAllPeople_WhenCalled_ShouldReturnAllPeople()
		{
			//Arrange
			var sut = new PersonRepository();

			//Act
			var actual = await sut.GetAllPeopleAsync();
			var dataLength = Enumerable.Count(actual);

			//Assert
			Assert.IsTrue(dataLength > 0, "Database must not be empty");
			Assert.IsTrue(dataLength >= 50, "Database records should be 50 or more");
		}

		[Test]
		public async Task GetPerson_WhenCalled_ShouldReturnPerson()
		{
			//Arrange
			var sut = new PersonRepository();

			//Act
			var actual = await sut.GetPerson(1);

			//Assert
			actual.Should().NotBeNull();
		}

		[Test]
		public void GetPerson_WhenCalledWithNonExistenceCode_ShouldThrowError()
		{
			//Arrange
			var sut = new PersonRepository();

			//Act
			var exception = Assert.ThrowsAsync<KeyNotFoundException>(() =>  sut.GetPerson(1264949526));

			//Assert
			Assert.AreEqual("Persons with code [1264949526] could not be found.", exception.Message);
		}

		[Test]
		[Ignore("We need to use transaction scope to revert changes")]
		public async Task AddPerson_WhenCalledPerson_ShouldSavePersonAsync()
		{
			var sut = new PersonRepository();
			var person = new Person 
			{
				Name = "Siphenathi",
				Surname = "Pantshwa",
				Id_Number = "9501045404082"
			};
			var dataLengthBefore = Enumerable.Count(await sut.GetAllPeopleAsync());
			var autoGeneratedKeyName = "code";
			//Act
			await sut.AddPersonAsync(person, autoGeneratedKeyName);
			var dataLengthAfter = Enumerable.Count(await sut.GetAllPeopleAsync());

			//Assert
			dataLengthAfter.Should().BeGreaterThan(dataLengthBefore);
		}

		[Test]
		public void AddPerson_WhenCalledPersonWithNonExistentAutoGeneratedKeyName_ShouldSavePersonAsync()
		{
			var sut = new PersonRepository();
			var person = new Person
			{
				Name = "Siphenathi",
				Surname = "Pantshwa",
				Id_Number = "9501045404082"
			};
			var autoGeneratedKeyName = "UnknownColumn";
			//Act
			var exception = Assert.ThrowsAsync<KeyNotFoundException>(() => sut.AddPersonAsync(person, autoGeneratedKeyName));

			//Assert
			exception.Message.Should().Be("Invalid name entered for record to be removed!");
		}

		//[Test]
		//public void Test()
		//{
		//	//Arrange 
		//	var expected = "sjsjsjs";
		//	//private IEnumerable<PropertyInfo> GetProperties => typeof(Person).GetProperties();
		//	var obj = typeof(Person).GetProperties;

		//	//Act
		//	var actual = GetFinalString();

		//	//Assert
		//	Assert.AreEqual(expected, actual);
		//}
	}
}
